# -*- coding: utf-8 -*-
"""S4A_HR1_Cables

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c67T60u71HNDoo7wPSrTfFJx80Qu9ZKH
"""

## INSTALL ALL REQUIRED PACKAGES
import importlib
if not importlib.util.find_spec("py_wake"):
  !pip install git+https://gitlab.windenergy.dtu.dk/TOPFARM/PyWake.git
if not importlib.util.find_spec("topfarm"):
  !pip install git+https://gitlab.windenergy.dtu.dk/TOPFARM/TopFarm2.git
if not importlib.util.find_spec("ed_win"):
  !pip install git+https://gitlab.windenergy.dtu.dk/TOPFARM/edwin.git@main#egg=ed_win[interarray]

!pip install ssms

#%% IMPORT ALL REQUIRED PACKAGES

import numpy as np
import pandas as pd

#%% IMPORT ALL REQUIRED FUNCTIONS
from ed_win.wind_farm_network import WindFarmNetwork, GeneticAlgorithmDriver

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# LÃ¦s koordinater fra CSV-filen
coordinates_df = pd.read_csv('/content/drive/My Drive/Colab Notebooks/Bachelor Project/Cable plots/Optimized_coordinates_S4AHR1.csv')
optimized_x = coordinates_df['x'].to_numpy()
optimized_y = coordinates_df['y'].to_numpy()

# Initialiser turb_init med x- og y-koordinaterne
turb_init = np.asarray([optimized_x, optimized_y]).T

# Fixed position for the REAL substation
substations_pos = np.asarray([[428945.53037103], [6152002.41458255]]).T

# Three types of cable, [thickness, n_wt, cost]
cables = np.array([[95, 4, 85], [150, 8, 125], [400, 16, 240]])

def cable_position(turb_init, **kwargs):
    L = 0
    G = None

    try:
        wfn = WindFarmNetwork(turbines_pos=turb_init, substations_pos=substations_pos, cables=cables)
        G = wfn.optimize()
        print('Solved with Heuristics')
    except Exception as e:
        print(f'Heuristics failed: {e}. Trying Genetic Algorithm...')
        wfn = WindFarmNetwork(turbines_pos=turb_init, substations_pos=substations_pos, cables=cables, drivers=[GeneticAlgorithmDriver()])
        G = wfn.optimize()
        print('Solved with Genetic Algorithm')

    L = G.size(weight="length")
    print('Total length is:', L, 'meters')

    return L / 1000, G  # Return both total cable length in kilometers and the optimized graph

# Calculate cable length and get the graph using turb_init
total_cable_length, G = cable_position(turb_init)
print(f'Total cable length in kilometers: {total_cable_length}')

G.plot()